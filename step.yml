#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  Swift Environment Variable Injector
summary: |
  Step to inject static values from environment variables into Swift code files before compilation and Continuous deployment allowing us to not expose our production keys and values in statically in our code and store sensitive values safe.
description: |
  This step allows us to inject CI pipelines environment variables values into Swift code static values before compilation and Continuous deployment to a specific environment(Development, Testing or Production) where we can define the values injected for each build and deployment e.g. a API url that the App uses and is different for each environment. 
  Also it allows us to not expose our production keys and values in statically in our code.
  For more info, check out the Swift [Variable Injector Project](https://github.com/LucianoPAlmeida/variable-injector) on github.
website: https://github.com/LucianoPAlmeida/bitrise-step-swift-environment-variable-injector
source_code_url: https://github.com/LucianoPAlmeida/bitrise-step-swift-environment-variable-injector
support_url: https://github.com/LucianoPAlmeida/bitrise-step-swift-environment-variable-injector/issues
host_os_tags:
  - osx-10.10

project_type_tags:
  - ios
  - macos

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - utility

is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: ""

deps:
  brew:
  - name: wget
  - name: unzip

toolkit:
  bash:
    entry_file: step.sh


inputs:
  - variable_injector_version: 0.3.3
    opts:
      title: Swift Variable Injector Version
      description: |-
        Variable Injector version to be used. Step will fail if invalid or non-existent is specified.
      is_required: true
  - files: 
    opts:
      title: "Paths of the Swift files"
      summary: The paths for the files which you be checked and have the values replaced if it's applicable.
      description: |
        All the file paths separated by a white space.
        The files will be visited by the [variable-injector](https://github.com/LucianoPAlmeida/variable-injector).
        If there are literals matching the ENV_VAR pattern and the environment variable name is defined on the current workflow it will replace with it value.
      
      is_expand: true
      is_required: true

  - vars_to_ignore: 
    opts:
      title: "Environment Variable Names to ignore"
      summary: The variable names that will be ignored by the variable injector.
      description: |
        All the names paths separated by a white space.
        If a string literal on this files matches the environment variable pattern $(ENV_VAR) but is not a ENV var to be replaced we can just ignore it. 
      
      is_expand: true
      is_required: false
  - verbose: "false"
    opts:
      title: "Verbose mode"
      summary: Indicates if the injection should print logs.
      description: |
        All injections variables and values logged. Also the output files content.
      
      is_expand: true
      is_required: false
      value_options: ["true", "false"]

